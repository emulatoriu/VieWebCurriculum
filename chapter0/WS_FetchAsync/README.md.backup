# Fetch & Async

Fetch is the ........

## Guidelines

We are going to check an Api for retrieving data. Then we are trying to get the data from there by using fetch and async/then.

### Promises
A Promise is a JavaScript object that represents a value that may not be available yet. Promises are used to handle asynchronous operations in JavaScript. The Promise object has three states:

Pending: The initial state, before the Promise is resolved or rejected.
Resolved: The Promise has completed successfully, and the resulting value is available.
Rejected: The Promise has failed, and an error is available.

The syntax of a Promise is as follows:
```javascript
const promise = new Promise((resolve, reject) => {
  // Async operation
  if (/* operation successful */) {
    resolve(result);
  } else {
    reject(error);
  }
});

promise.then(result => {
  // Handle the result
}).catch(error => {
  // Handle the error
});

```

### .then()
In JavaScript, promises are used to handle asynchronous operations, such as making HTTP requests or reading from a file. Promises represent a value that may not be available yet, but will be available at some point in the future. Promises have several methods that allow you to handle the result of the asynchronous operation.

One of the most commonly used methods of a promise is then(). The then() method is called on a promise and takes two optional arguments: a success handler and an error handler. The success handler is called when the promise is resolved, meaning the asynchronous operation has completed successfully. The error handler is called when the promise is rejected, meaning the asynchronous operation has failed.

Here's an example of using the then() method on a promise:

```javascript
const promise = new Promise((resolve, reject) => {
  // Do some asynchronous operation, and then either resolve or reject the promise
});

promise
  .then(result => {
    // Handle the successful result of the promise
  })
  .catch(error => {
    // Handle the error that caused the promise to be rejected
  });
```
In the above example, we're creating a new promise and using the then() method to handle the result of the promise. If the promise is resolved, the success handler will be called with the result of the promise. If the promise is rejected, the error handler will be called with the error that caused the promise to be rejected.

### async
The async function is a feature in JavaScript that simplifies the use of promises. It allows you to write asynchronous code that looks and behaves like synchronous code. An async function returns a promise, and any values that are returned from the function are wrapped in a resolved promise.

To define an async function, you simply add the async keyword before the function declaration. Inside the function, you can use the await keyword to pause the execution of the function until a promise is resolved. When the promise is resolved, the value of the promise is returned and the function continues executing.

Here's an example of using the async function with the await keyword:

```javascript
async function getData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}

getData()
  .then(data => {
    // Handle the successful result of the promise
  })
  .catch(error => {
    // Handle the error that caused the promise to be rejected
  });
```
In the above example, we're defining an async function named getData(). Inside the function, we're using the await keyword to pause the execution of the function until the fetch() function returns a response. We're then using await again to pause the execution of the function until the response has been parsed as JSON. Finally, we're returning the parsed JSON data.

When we call the getData() function, it returns a promise that resolves to the parsed JSON data. We can use the then() method on the returned promise to handle the successful result of the promise, or the catch() method to handle any errors that occur during the execution of the getData() function.

## Exercise

You have given a code snippet. There are some todos as comments in the code, which you have to implement to complete the excercise.


## Resources
* [MDN Web Docs: Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)
* [MDN Web Docs: Using Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)
* [JavaScript Promises for Dummies](https://www.digitalocean.com/community/tutorials/understanding-javascript-promises)
* [Asynchronous JavaScript: From Callbacks to Promises to Async/Await](https://ui.dev/async-javascript-from-callbacks-to-promises-to-async-await)
* [Promisees]()